
// Fiber 理解
// Fiber 可以理解为是一个执行单元，也可以理解为是一种数据结构。Fiber 可以理解为一个执行单元，
// 每次执行完一个执行单元，React 就会检查现在还剩多少时间，如果没有时间则将控制权让出去。
// Fiber 还可以理解为是一种数据结构，React Fiber 就是采用链表实现的。每个 Virtual DOM 
// 都可以表示为一个 Fiber。

/**
 * ====================================================================================
 */

// fiber 可将长时间的同步任务拆分成多个小任务，从而让浏览器能够抽身去响应其他事件，等它空了再继续回来进行计算。

// 概念
// React Fiber 是 react 执行渲染时的一种新的调度策略， JavaScript 是单线程的，一旦组件开始更新，主线程
// 就一直被 React 控制，这是如果再执行交互操作，将会造成卡顿。
// React Fiber 就是通过对象记录组件上需要做或者已经完成的更新，一个组件可以对应多个 Fiber
// 在 render 创建 React Element树在第一次渲染是会创建一颗结构一模一样的 fiber 节点树。
// 不同 React Element 类型对应不同 Fib 节点类型。一个 React Element 的工作就由它对应的 Fiber 节点来控制

// Fiber 更新时会从原来的 Fiber 克隆出一个新的 Fiber, 两个 Fiber diff 出得变化做记录。一个组件在更新时最多
// 有两个 Fiber 与其对应，更新结束后记录的节点会取代之前的节点

// React Fiber 重构这种方式，渲染过程采用切片的方式，每执行一会儿，就歇一会儿。如果有优先级更高的任务，将限制性，
// 歼敌了页面发生卡顿的可能性，对实时性要求较高的场景体验更好

// 什么是 Fiber?
// js 处理大型计算时会导致页面出现卡顿的现象，随意在这些情况下，必然会导致动画丢帧，卡顿等问题。为了解决这个问题，
// 我们将大型的计算拆分成一个个小型的计算，然后按照执行顺序异步调用，这样就不会长时间霸占线程，UI 也能够在两次计算执行的
// 间隙进行更新，从而给用户及时的反馈。

// Fiber 的基本规则
// 调和阶段
// 找出需要更新的工作(Diff Fiber Tree)，就是一个计算阶段，计算结果可以被缓存，也可被打断
// 交付阶段
// 提交所有更新并渲染，为了防止页面都懂，不能被打断

// Fiber 数据结构
// Fiber 是个链表，有 child 和 sibling 属性，指向一个自节点和相邻的兄弟节点，从而构成 fiber tree。return 属性指向父节点

// Fiber 的执行流程
// 1. 用户操作引起 setState 被调用 -> 初始化一些数据结构
// 2. 根据优先级插入队列相应位置，初始化两个更新队列
// 3. 开始进行任务分片调度，首先更新每个 fiber 优先级。当 fiber 返回 null 时找到父即诶单，然后将所有变化归到 root
// 4. 把当前的更新添加到调度队列中，根据当前是否异步渲染，做异步调用。
// 5. 判断浏览器空闲时，完成下一个分片的工作，如果没工作完，将会放弃掉
// 6. 执行调和阶段和交付阶段